// @ts-nocheck
import { NextRequest, NextResponse } from "next/server";
import formidable from "formidable";
import fs from "fs/promises";
import path from "path";
import pdfParse from "pdf-parse";

// Force API route to be dynamic
export const dynamic = "force-dynamic";

// Temporary folder for uploaded files
const uploadDir = "/tmp";

export async function POST(req: NextRequest) {
  try {
    // Initialize Formidable
    const form = formidable({ 
      uploadDir, 
      keepExtensions: true,
      multiples: false 
    });

    // Parse the form
    const [fields, files] = await new Promise((resolve, reject) => {
      form.parse(req, (err, fields, files) => {
        if (err) reject(err);
        else resolve([fields, files]);
      });
    });

    // Extract file and difficulty
    const file = files.file?.[0];
    const difficulty = fields.difficulty?.[0];

    if (!file || !difficulty) {
      return NextResponse.json({ error: "Missing file or difficulty" }, { status: 400 });
    }

    // Ensure file is a PDF
    if (file.mimetype !== "application/pdf") {
      return NextResponse.json({ error: "Only PDF files are supported" }, { status: 400 });
    }

    // Check if file exists
    const filePath = file.filepath;
    console.log("Uploaded File Path:", filePath);

    try {
      await fs.access(filePath); // Ensure the file exists
    } catch {
      return NextResponse.json({ error: "Uploaded file not found" }, { status: 400 });
    }

    // Read and parse the PDF
    const fileData = await fs.readFile(filePath);
    const pdfData = await pdfParse(fileData);
    const extractedText = pdfData.text.trim();

    if (!extractedText) {
      return NextResponse.json({ error: "Could not extract text from PDF" }, { status: 400 });
    }

    console.log("Extracted PDF Text:", extractedText); // Debugging log

    return NextResponse.json({ success: true, extractedText });

  } catch (error) {
    console.error("Error processing file:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
